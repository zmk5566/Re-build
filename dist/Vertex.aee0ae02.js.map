{"version":3,"sources":["src/HexCubeCoord.js","src/Vertex.js"],"names":["HexCubeCoord","exports","q","r","s","_classCallCheck","worldPosition","subsquad_list","_createClass","key","value","factor","world_position","Array","Math","sqrt","_defineProperty","center","cube_direction_vectors","CubeDirection","direction","CubeAdd","hex","dir","CubeNeighbor","CubeScale","CubeRing","radius","results","console","log","push","i","j","HexCoordList","result","_HexCubeCoord","require","_typeof","o","Symbol","iterator","constructor","prototype","_inherits","subClass","superClass","TypeError","Object","create","writable","configurable","defineProperty","_setPrototypeOf","p","setPrototypeOf","bind","__proto__","_createSuper","Derived","hasNativeReflectConstruct","_isNativeReflectConstruct","_createSuperInternal","Super","_getPrototypeOf","NewTarget","Reflect","construct","arguments","apply","_possibleConstructorReturn","self","call","_assertThisInitialized","ReferenceError","sham","Proxy","Boolean","valueOf","e","getPrototypeOf","_defineProperties","target","props","length","descriptor","enumerable","_toPropertyKey","Constructor","protoProps","staticProps","instance","obj","arg","_toPrimitive","String","input","hint","prim","toPrimitive","undefined","res","Number","Vertex","x","y","z","type","subquadlist","subquadid_list","MarchVertex","_Vertex","_super","layer","IsActive","_this","CreateMarchVertex","AllVertexList","AllMarchVertexList","AllMarchVertexLayer_j"],"mappings":"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","file":"Vertex.aee0ae02.js","sourceRoot":"..","sourcesContent":["//TODO:\r\n//创建六边形cube coordinate坐标\r\nexport class HexCubeCoord{\r\n    //一个六边形\r\n    static worldPosition;//世界坐标\r\n    constructor(q,r,s){\r\n        //六边形的HexCube坐标+它的世界坐标\r\n        this.q=q;\r\n        this.r=r;\r\n        this.s=s;\r\n        this.worldPosition=this.worldPosition(q,r,s);\r\n        this.subsquad_list=[];\r\n    };\r\n    worldPosition(q,r,s){\r\n        //这个六边形的中心点\r\n        var factor=2;\r\n        var world_position=new Array((q*Math.sqrt(3)/2)*factor, 0, (-r-(q/2))*factor);\r\n        //console.log(\"world position\",world_position[0],world_position[1],world_position[2]);\r\n        return world_position;\r\n    }\r\n}\r\nvar center=new HexCubeCoord(0,0,0);\r\n//六边形移动方向\r\nvar cube_direction_vectors=[\r\n    new HexCubeCoord(+1,0,-1),\r\n    new HexCubeCoord(+1,-1,0),\r\n    new HexCubeCoord(0,-1,+1),\r\n    new HexCubeCoord(-1,0,+1),\r\n    new HexCubeCoord(-1,+1,0),\r\n    new HexCubeCoord(0,+1,-1)\r\n];\r\n//返回一个方向\r\nfunction CubeDirection(direction){\r\n    return cube_direction_vectors[direction];\r\n}\r\n//定义Add方法\r\nfunction CubeAdd(hex,dir){\r\n    //console.log(dir.q,dir.r,dir.s);\r\n    return new HexCubeCoord(hex.q + dir.q, hex.r + dir.r, hex.s + dir.s);\r\n}\r\n//返回一个六边形HexCoord：按方向移动\r\nfunction CubeNeighbor(hex,direction){\r\n    return CubeAdd(hex,CubeDirection(direction));\r\n}\r\n//定义Scale方法\r\nfunction CubeScale(dir,factor){\r\n    return new HexCubeCoord(dir.q*factor,dir.r*factor,dir.s*factor);\r\n}\r\n//Single Ring\r\n//返回一个六边形list：一个半径为Radius的六边形环\r\nexport function CubeRing(center,radius){\r\n    var results=[];\r\n    if(radius==0){\r\n        console.log(\"radius is 0\");\r\n        results.push(new HexCubeCoord(0,0,0));\r\n    }\r\n    else{\r\n        //console.log(\"genterating single ring of radius \",radius);\r\n        // var hex=new HexCubeCoord(center.q + CubeScale(CubeDirection(4),radius).q, \r\n        // center.r + CubeScale(CubeDirection(4),radius).r, \r\n        // center.s + CubeScale(CubeDirection(4),radius).s);\r\n        var hex=CubeAdd(center,(CubeScale(CubeDirection(4),radius)));\r\n        for(let i=0;i<6;i++){\r\n            for(let j=0;j<radius;j++){\r\n                //console.log(\"world position\",hex.worldPosition[0],hex.worldPosition[1],hex.worldPosition[2]);\r\n                results.push(hex);\r\n                hex=CubeNeighbor(hex,i);\r\n            }\r\n        }\r\n    }\r\n    //console.log(results.length);\r\n    return results;\r\n}\r\n//返回一个六边形list：一个半径为radius的六边形饼\r\nexport function HexCoordList(radius){\r\n    var result=[];\r\n    for(let i=0;i<=radius;i++){\r\n        result.push(CubeRing(center,i));\r\n    }\r\n    return result;\r\n}","import { HexCubeCoord } from \"./HexCubeCoord\";\r\nexport class Vertex{\r\n    subquadlist=[];\r\n    subquadid_list=[];\r\n    constructor(x,y,z,type) {\r\n        this.x=x;\r\n        this.y=y;\r\n        this.z=z;\r\n        this.type=type;\r\n        this.subquadlist=[];//不确定，最好别用\r\n        this.subquadid_list=[];\r\n      }\r\n}\r\n\r\nexport class MarchVertex extends Vertex{\r\n  subquadid_list=[];\r\n    constructor(x,y,z,type,layer,IsActive,subquadid_list){\r\n      super(x,y,z,type);\r\n      this.layer=layer;\r\n      this.subquadid_list=subquadid_list;\r\n      this.IsActive=IsActive;\r\n    }\r\n}\r\n\r\nexport function CreateMarchVertex(AllVertexList,AllMarchVertexList,layer){\r\n  //根据顶点坐标创建3D\r\n  for(let j=0;j<layer;j++){\r\n    var AllMarchVertexLayer_j=[];\r\n    for(let i=0;i<AllVertexList.length;i++){\r\n        AllMarchVertexLayer_j.push(new MarchVertex(AllVertexList[i].x,\r\n            j,//layer*height,因为设置的height=1\r\n            AllVertexList[i].z,\r\n            AllVertexList[i].type,\r\n            j,\r\n            false,\r\n            AllVertexList[i].subquadid_list));\r\n    }\r\n    AllMarchVertexList.push(AllMarchVertexLayer_j);\r\n  }\r\n}\r\n"]}