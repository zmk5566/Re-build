{"version":3,"sources":["src/HexCubeCoord.js","src/Vertex.js","src/HexGrid.js"],"names":["HexCubeCoord","q","r","s","worldPosition","subsquad_list","factor","world_position","Array","Math","sqrt","center","cube_direction_vectors","CubeDirection","direction","CubeAdd","hex","dir","CubeNeighbor","CubeScale","CubeRing","radius","results","console","log","push","i","j","HexCoordList","result","Vertex","x","y","z","type","subquadlist","subquadid_list","HexGrid","CellSize","vetex_hex","Vertex_hex","Hex","hexes"],"mappings":"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","file":"HexGrid.ee257aab.js","sourceRoot":"..","sourcesContent":["//TODO:\r\n//创建六边形cube coordinate坐标\r\nexport class HexCubeCoord{\r\n    //一个六边形\r\n    static worldPosition;//世界坐标\r\n    constructor(q,r,s){\r\n        //六边形的HexCube坐标+它的世界坐标\r\n        this.q=q;\r\n        this.r=r;\r\n        this.s=s;\r\n        this.worldPosition=this.worldPosition(q,r,s);\r\n        this.subsquad_list=[];\r\n    };\r\n    worldPosition(q,r,s){\r\n        //这个六边形的中心点\r\n        var factor=2;\r\n        var world_position=new Array((q*Math.sqrt(3)/2)*factor, 0, (-r-(q/2))*factor);\r\n        //console.log(\"world position\",world_position[0],world_position[1],world_position[2]);\r\n        return world_position;\r\n    }\r\n}\r\nvar center=new HexCubeCoord(0,0,0);\r\n//六边形移动方向\r\nvar cube_direction_vectors=[\r\n    new HexCubeCoord(+1,0,-1),\r\n    new HexCubeCoord(+1,-1,0),\r\n    new HexCubeCoord(0,-1,+1),\r\n    new HexCubeCoord(-1,0,+1),\r\n    new HexCubeCoord(-1,+1,0),\r\n    new HexCubeCoord(0,+1,-1)\r\n];\r\n//返回一个方向\r\nfunction CubeDirection(direction){\r\n    return cube_direction_vectors[direction];\r\n}\r\n//定义Add方法\r\nfunction CubeAdd(hex,dir){\r\n    //console.log(dir.q,dir.r,dir.s);\r\n    return new HexCubeCoord(hex.q + dir.q, hex.r + dir.r, hex.s + dir.s);\r\n}\r\n//返回一个六边形HexCoord：按方向移动\r\nfunction CubeNeighbor(hex,direction){\r\n    return CubeAdd(hex,CubeDirection(direction));\r\n}\r\n//定义Scale方法\r\nfunction CubeScale(dir,factor){\r\n    return new HexCubeCoord(dir.q*factor,dir.r*factor,dir.s*factor);\r\n}\r\n//Single Ring\r\n//返回一个六边形list：一个半径为Radius的六边形环\r\nexport function CubeRing(center,radius){\r\n    var results=[];\r\n    if(radius==0){\r\n        console.log(\"radius is 0\");\r\n        results.push(new HexCubeCoord(0,0,0));\r\n    }\r\n    else{\r\n        //console.log(\"genterating single ring of radius \",radius);\r\n        // var hex=new HexCubeCoord(center.q + CubeScale(CubeDirection(4),radius).q, \r\n        // center.r + CubeScale(CubeDirection(4),radius).r, \r\n        // center.s + CubeScale(CubeDirection(4),radius).s);\r\n        var hex=CubeAdd(center,(CubeScale(CubeDirection(4),radius)));\r\n        for(let i=0;i<6;i++){\r\n            for(let j=0;j<radius;j++){\r\n                //console.log(\"world position\",hex.worldPosition[0],hex.worldPosition[1],hex.worldPosition[2]);\r\n                results.push(hex);\r\n                hex=CubeNeighbor(hex,i);\r\n            }\r\n        }\r\n    }\r\n    //console.log(results.length);\r\n    return results;\r\n}\r\n//返回一个六边形list：一个半径为radius的六边形饼\r\nexport function HexCoordList(radius){\r\n    var result=[];\r\n    for(let i=0;i<=radius;i++){\r\n        result.push(CubeRing(center,i));\r\n    }\r\n    return result;\r\n}","import { HexCubeCoord } from \"./HexCubeCoord\";\r\nexport class Vertex{\r\n    subquadlist=[];\r\n    subquadid_list=[];\r\n    constructor(x,y,z,type) {\r\n        this.x=x;\r\n        this.y=y;\r\n        this.z=z;\r\n        this.type=type;\r\n        this.subquadlist=[];\r\n        this.subquadid_list=[];\r\n      }\r\n}\r\n\r\n\r\n","import {Vertex_hex,Hex} from './Vertex.js';\r\nexport class HexGrid{\r\n    hexes=[];\r\n    constructor(radius,CellSize){\r\n        this.radius=radius;\r\n        this.CellSize=CellSize;\r\n        var vetex_hex=new Vertex_hex();\r\n        Hex(this.hexes);\r\n    }\r\n}"]}